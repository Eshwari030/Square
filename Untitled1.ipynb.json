{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "name": ""
    }
  },
  "nbformat_minor": 5,
  "nbformat": 4,
  "cells": [
    {
      "id": "238421d5-9646-4b2e-9ba8-7f6d8ed6b0d9",
      "cell_type": "code",
      "source": "Q1.\ndef get_odd_numbers():\n    odd_numbers_list = [x for x in range(1, 26) if x % 2 != 0]\n    return odd_numbers_lit",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "5f015c63-eb4a-4f03-8013-a9a1acda42c2",
      "cell_type": "code",
      "source": "Q2. \ndef args_function(*args):\n    result = 0\n    for num in args:\n        result += num\n    return result\n\ndef kwargs_function(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "11c8a91f-a26e-457b-a92f-72e260392c35",
      "cell_type": "code",
      "source": "Q2. \ndef args_function(*args):\n    result = 0\n    for num in args:\n        result += num\n    return result\n\ndef kwargs_function(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "1b89f0bb-8856-45ac-bf60-4aa755874f15",
      "cell_type": "code",
      "source": "Q3.\nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nmy_iterator = iter(my_list)  # Initializing the iterator\n\nfor _ in range(5):\n    print(next(my_iterator))  # Iterating and printing\n\n\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "f272868c-cf32-41ed-90c9-061563a9d966",
      "cell_type": "code",
      "source": "Q4. \ndef count_up_to(n):\n    i = 1\n    while i <= n:\n        yield i  # Yield keyword makes it a generator\n        i += 1\n\n# Example usage:\nfor number in count_up_to(5):\n    print(number)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "c8637d99-1507-46f0-9f68-2ab8e0fa50f5",
      "cell_type": "code",
      "source": "Q5. \ndef primes_less_than(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    for prime in primes:\n        yield prime\n\nprime_generator = primes_less_than(1000)\n\nfor _ in range(20):\n    print(next(prime_generator))",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "40660d78-edd7-4b1f-975e-49ff80012e4c",
      "cell_type": "code",
      "source": "Q6. \ndef fibonacci_first_10():\n    a, b = 0, 1\n    count = 0\n    while count < 10:\n        print(a)\n        a, b = b, a + b\n        count += 1\n\nfibonacci_first_10()",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "8965de3b-23fe-4138-9caf-d9311c4760c3",
      "cell_type": "code",
      "source": "Q7. \nstring = 'pwskills'\nresult = [char for char in string]\nprint(result)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "d0e246a1-d1f0-4f7f-80ab-e27909d40acd",
      "cell_type": "code",
      "source": "Q8. \ndef is_palindrome(number):\n    original_number = number\n    reversed_number = 0\n    while number > 0:\n        digit = number % 10\n        reversed_number = (reversed_number * 10) + digit\n        number //= 10\n    return original_number == reversed_number",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "54555b88-704e-43e5-a9a8-a4b385de5811",
      "cell_type": "code",
      "source": "Q9. \nodd_numbers = [num for num in range(1, 101) if num % 2 != 0]\nprint(odd_numbers)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}